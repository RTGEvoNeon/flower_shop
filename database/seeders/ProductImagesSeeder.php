<?php

namespace Database\Seeders;

use App\Models\Product;
use App\Models\ProductImage;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\File;

class ProductImagesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        echo "üñºÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º...\n";

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        $products = Product::all();

        if ($products->isEmpty()) {
            echo "‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n";
            return;
        }

        echo "üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {$products->count()}\n";

        foreach ($products as $product) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É –ø—Ä–æ–¥—É–∫—Ç–∞
            if ($product->images()->count() > 0) {
                echo "‚è≠Ô∏è –£ –ø—Ä–æ–¥—É–∫—Ç–∞ '{$product->name}' —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...\n";
                continue;
            }

            // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
            $productImagePath = storage_path("products/{$product->id}");
            
            if (!File::exists($productImagePath)) {
                echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {$product->id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...\n";
                continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ JPG —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            $imageFiles = File::glob($productImagePath . '/*.jpg');
            
            if (empty($imageFiles)) {
                echo "‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {$product->id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...\n";
                continue;
            }

            echo "üé® –ù–∞–π–¥–µ–Ω–æ " . count($imageFiles) . " –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è '{$product->name}'...\n";

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            foreach ($imageFiles as $index => $filePath) {
                $filename = basename($filePath);
                $fileSize = File::size($filePath);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                $imageInfo = getimagesize($filePath);
                $width = $imageInfo[0] ?? null;
                $height = $imageInfo[1] ?? null;
                
                ProductImage::create([
                    'product_id' => $product->id,
                    'filename' => $filename,
                    'original_name' => $filename,
                    'path' => "{$product->id}/{$filename}",
                    'url' => null, // –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                    'mime_type' => 'image/jpeg',
                    'file_size' => $fileSize,
                    'width' => $width,
                    'height' => $height,
                    'sort_order' => $index,
                    'is_primary' => $index === 0, // –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–µ
                    'is_active' => true,
                    'alt_text' => $product->name . ' - —Ñ–æ—Ç–æ ' . ($index + 1),
                    'description' => null,
                ]);
                
                echo "  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {$filename}\n";
            }

            echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –ø—Ä–æ–¥—É–∫—Ç '{$product->name}' - " . count($imageFiles) . " –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n";
        }

        echo "üéâ –ì–æ—Ç–æ–≤–æ! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º.\n";
    }
}
